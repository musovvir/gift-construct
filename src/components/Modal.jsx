import { useState, useEffect } from 'react';
import SearchableSelect from './SearchableSelect';
import { 
  useBackdropsForGift, 
  useModelsForGift, 
  usePatternsForGift,
  useOriginalLottie
} from '../hooks/useApi';

const Modal = ({ isOpen, cell, onClose, onApply, onApplyAndClose, onReset, preloadedData, isPreloading, previousCell }) => {
  const [formData, setFormData] = useState({
    gift: '',
    model: '',
    backdrop: '',
    pattern: '',
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º formData –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏
  useEffect(() => {
    if (isOpen) {
      setFormData({
        gift: cell.gift || '',
        model: cell.model || '',
        backdrop: cell.backdrop || '',
        pattern: cell.pattern || '',
      });
    }
  }, [isOpen, cell]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ —Å –ø–æ–º–æ—â—å—é React Query
  const { 
    data: giftBackdrops = [], 
    isLoading: isBackdropsLoading 
  } = useBackdropsForGift(formData.gift);
  
  const { 
    data: giftModels = [], 
    isLoading: isModelsLoading 
  } = useModelsForGift(formData.gift);
  
  const { 
    data: giftPatterns = [], 
    isLoading: isPatternsLoading 
  } = usePatternsForGift(formData.gift);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º Original.json –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–∞—Ä–∫–∞
  const { 
    data: originalLottie, 
    isLoading: isOriginalLoading 
  } = useOriginalLottie(formData.gift);


  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤—ã–±–æ—Ä–µ)
  useEffect(() => {
    if (formData.gift !== cell.gift && formData.gift) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–æ–≥–¥–∞ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
      const isCopying = formData.model || formData.backdrop || formData.pattern;
      if (!isCopying) {
        setFormData(prev => ({
          ...prev,
          model: '',
          backdrop: '',
          pattern: '',
        }));
      }
    }
  }, [formData.gift, cell.gift]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã - –ø—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –µ—Å—Ç—å –º–æ–¥–µ–ª—å
  const handleInputChange = (field, value) => {
    const newFormData = {
      ...formData,
      [field]: value,
    };
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ)
    if (field === 'gift' && value !== formData.gift) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ - –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, —Ç–æ —ç—Ç–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
      const isCopying = formData.model && formData.backdrop && formData.pattern;
      if (!isCopying) {
        newFormData.model = '';
        newFormData.backdrop = '';
        newFormData.pattern = '';
      }
    }
    
    setFormData(newFormData);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∞—Ä–æ–∫ (—Å Original.json) –∏–ª–∏ –º–æ–¥–µ–ª—å
    if (newFormData.gift && (newFormData.model || field === 'gift')) {
      onApply(newFormData);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ - –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
  const handleApply = () => {
    onClose();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞
  const handleReset = () => {
    setFormData({
      gift: '',
      model: '',
      backdrop: '',
      pattern: '',
    });
    onReset();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —è—á–µ–π–∫–∏
  const handleCopyFromPrevious = () => {
    if (!previousCell) return;
    
    const copiedData = {
      gift: previousCell.gift || '',
      model: previousCell.model || '',
      backdrop: previousCell.backdrop || '',
      pattern: previousCell.pattern || '',
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º formData
    setFormData(copiedData);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ —è—á–µ–π–∫–µ —á–µ—Ä–µ–∑ handleInputChange –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (copiedData.model) {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Ö –≤–≤–µ–ª
      onApply(copiedData);
    }
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  const handleBackdropClick = (e) => {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏–∑ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const gifts = preloadedData?.gifts || [];

  if (!isOpen) return null;

  return (
    <div className="modal-overlay" onClick={handleBackdropClick}>
      <div className="modal-content">
        <div className="modal-header">
          <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è—á–µ–π–∫–∏</h2>
          <div className="modal-header-actions">
            {previousCell && (
              <button 
                className="copy-btn"
                onClick={handleCopyFromPrevious}
                aria-label="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —è—á–µ–π–∫–∏"
                title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —è—á–µ–π–∫–∏"
              >
                üìÑ
              </button>
            )}
            <button 
              className="close-btn"
              onClick={onClose}
              aria-label="–ó–∞–∫—Ä—ã—Ç—å"
            >
              &times;
            </button>
          </div>
        </div>

        <div className="modal-body">
          {/* –í—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞ */}
          <div className="form-group">
            <label htmlFor="gift-select">–ü–æ–¥–∞—Ä–æ–∫</label>
            <SearchableSelect
              id="gift-select"
              value={formData.gift}
              onChange={(value) => handleInputChange('gift', value)}
              options={gifts}
              placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫"
              searchPlaceholder="–ü–æ–∏—Å–∫ –ø–æ–¥–∞—Ä–∫–æ–≤..."
              disabled={isPreloading}
              isLoading={isPreloading}
            />
          </div>

          {/* –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ */}
          <div className="form-group">
            <label htmlFor="model-select">–ú–æ–¥–µ–ª—å</label>
            <SearchableSelect
              id="model-select"
              value={formData.model}
              onChange={(value) => handleInputChange('model', value)}
              options={giftModels}
              placeholder={formData.gift ? "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å" : "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫"}
              searchPlaceholder="–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π..."
              disabled={!formData.gift}
              isLoading={formData.gift && isModelsLoading}
            />
          </div>

          {/* –í—ã–±–æ—Ä —Ñ–æ–Ω–∞ */}
          <div className="form-group">
            <label htmlFor="backdrop-select">–§–æ–Ω</label>
            <SearchableSelect
              id="backdrop-select"
              value={formData.backdrop}
              onChange={(value) => handleInputChange('backdrop', value)}
              options={giftBackdrops}
              placeholder={formData.gift ? "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω" : "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫"}
              searchPlaceholder="–ü–æ–∏—Å–∫ —Ñ–æ–Ω–æ–≤..."
              disabled={!formData.gift}
              isLoading={formData.gift && isBackdropsLoading}
            />
          </div>

          {/* –í—ã–±–æ—Ä —É–∑–æ—Ä–∞ */}
          <div className="form-group">
            <label htmlFor="pattern-select">–£–∑–æ—Ä</label>
            <SearchableSelect
              id="pattern-select"
              value={formData.pattern}
              onChange={(value) => handleInputChange('pattern', value)}
              options={giftPatterns}
              placeholder={formData.gift ? "–í—ã–±–µ—Ä–∏—Ç–µ —É–∑–æ—Ä" : "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫"}
              searchPlaceholder="–ü–æ–∏—Å–∫ —É–∑–æ—Ä–æ–≤..."
              disabled={!formData.gift}
              isLoading={formData.gift && isPatternsLoading}
            />
          </div>
        </div>

        <div className="modal-footer">
          <button 
            className="btn btn-secondary" 
            onClick={handleReset}
          >
            –°–±—Ä–æ—Å–∏—Ç—å
          </button>
              <button 
                className="btn btn-primary" 
                onClick={handleApply}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
        </div>
      </div>
    </div>
  );
};

export default Modal;